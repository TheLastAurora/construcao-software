  # Tarefa 017 - Configuração de software em tempo de execução, Generics, Closure e Logging - 30/06/2023

1. Considere os seguintes links, sobre os temas **Configuração de software em tempo de execução, _Generics_, _Closure_ e _Logging_**

  1.1 Configuração de software em tempo de execução:

      1.1.1 - [Link1](https://www.baeldung.com/spring-profiles);

      1.1.2 - [Link2](https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring).

  1.2 _Closure_:

    1.2.1 - [Link3](https://www.geeksforgeeks.org/closures-in-java-with-examples/).

    1.2.2 - [Link4](https://receitasdecodigo.com.br/java/exemplo-de-foreach-do-java-8).

    1.2.3 - [Link5](https://www.devmedia.com.br/como-usar-funcoes-lambda-em-java/32826).

  1.3 _Generics_:

    1.3.1 - [Link6](https://www.devmedia.com.br/usando-generics-em-java/28981).

    1.3.2 - [Link7](https://www.devmedia.com.br/java-generics-trabalhando-com-metodos/30911).

    1.3.3 - [Link8](https://howtodoinjava.com/java/generics/complete-java-generics-tutorial/).

  1.4 _Logging_:

    1.4.1 - [Link9](https://www.loggly.com/ultimate-guide/java-logging-basics/).

    1.4.2 - [Link10](https://www.journaldev.com/977/logger-in-java-logging-example).

    1.4.3 - [Link11](https://www.edureka.co/blog/logger-in-java).

2. Solicita o estudo destes temas e elaborar um texto descrito, manifestando seu entendimento a respeito de cada um deles e ainda apresentando exemplos de utilização dos mesmos.
  

  A Inversão de Controle (IoC) é um princípio que estabele a delegação das responsabilidades de um sujeito para outro, em que o  controle do ciclo de vida dessas funções esteja avocado para uma infraestrutura superior, ou externa. Muitos frameworks se utilizam desse padrão, já que promove a sua extensibiliadde. Já a Injeção de Dependência é uma implementação desse princípio, possuindo três variações de injeção: por Contrutor, Interface e Setter. Abaixo seguem exemplos dos 3 tipos implementados em Python seguindo o exemplo de um User que se conecta uma com um Database.

    ```py
    class User:
      """
      Sem injeção de dependências.
      """
      def __init__(self):
        pass

      def database_connection(self, opts):
        try:
          self.conn = Database(opts)
        except:
          "Failed to stablish connection"
    ```

    ```py
    class User:
      """
      Injeção por contrutor.
      """
      def __init__(self, conn):
        self.conn = conn
    ```

    ```py
    class User:
      """
      Injeção por setter.
      """
      def __init__(self):
        self.conn = None

      def set_conn(self, conn):
        self.conn = conn
    ```

      ```py
    class User:
      """
      Injeção por método (interface).
      """
      def __init__(self):
        pass

      def set_conn(self, conn):
        return conn.start()
    ```
  Uma closure é uma função aninhada em que a função interna tem conhecimento do estado da função de fora, ou seja, ela sabe do escopo da função de fora. Esse padrão é muito popular juntamente com os tipos genéricos para implementar logging em sistemas. Segue abaixo um exemplo de como isso é implementado em python usando Decorators.

  ```py
  from time import perf_counter
  from typing import TypeVar

  T = TypeVar('T')

  def greet_n_time(obj: T) -> T:
    def outer(fn):
      def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        print(f'Tempo de execução da função {fn.__name__}: {start - perf_counter()}')
        return result
      return inner
    return outer

  @greet_n_time()
  def multiply():
    print(1*2)
  ```

**INSTRUÇÕES**
1. Esta é uma tarefa individual. A entrega deve ser entregue no seu repositório pessoal utilizado para a manutenção do controle de versão dos artefatos da disciplina, dentro de uma pasta chamada tarefa017.
2. O prazo para entrega desta tarefa é as 23h59min do dia 02/07/2023.

